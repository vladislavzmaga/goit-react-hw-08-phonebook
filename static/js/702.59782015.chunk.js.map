{"version":3,"file":"static/js/702.59782015.chunk.js","mappings":"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","sources":["components/Box/Box.styled.js","components/Form/Form.styled.js","components/Form/Form.jsx","components/Box/Box.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","components/ContactsList/ContactsItem/ContactsItem.styled.js","components/ContactsList/ContactsItem/ContactsItem.jsx","components/ContactsList/Contacts.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Box = styled.div`\n  width: 500px;\n  margin: 50px auto;\n  background-color: darkgrey;\n  border-radius: 5px;\n`;\n","import styled from 'styled-components';\n\nexport const Forms = styled.form`\n  padding-top: 15px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormLable = styled.label`\n  position: relative;\n  font-size: 16px;\n  font-weight: bold;\n  width: 250px;\n  height: 20px;\n  margin: 0 auto;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const FormInput = styled.input`\n  position: absolute;\n  margin-left: 5px;\n  height: 14px;\n  right: 0;\n`;\n\nexport const FormButton = styled.button`\n  background-color: blue;\n  border: none;\n  color: white;\n  cursor: pointer;\n  width: 100px;\n  height: 30px;\n  border-radius: 5px;\n  transition: transform 300ms;\n  margin: 10px auto;\n  :hover {\n    transform: scale(1.1);\n    background-color: blueviolet;\n  }\n`;\n","import React from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsSlice';\n\nimport { Forms, FormLable, FormInput, FormButton } from './Form.styled';\n\nexport const Form = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const hundleSubmit = evt => {\n    evt.preventDefault();\n    const name = evt.target.name.value;\n    const number = evt.target.number.value;\n    const newContact = {\n      name,\n      number,\n      id: nanoid(),\n    };\n    addUser(newContact);\n    evt.target.reset();\n  };\n\n  const addUser = newContact => {\n    let isContains = false;\n    contacts.map(contact => {\n      if (contact.name === newContact.name) {\n        isContains = true;\n      }\n      return isContains;\n    });\n    isContains\n      ? Notiflix.Report.failure(\n          'Error',\n          `${newContact.name} is already in contacts`,\n          'close'\n        )\n      : dispatch(addContact(newContact));\n  };\n\n  return (\n    <Forms onSubmit={hundleSubmit}>\n      <FormLable>\n        Name\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </FormLable>\n      <FormLable>\n        Number\n        <FormInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </FormLable>\n      <FormButton type=\"submit\">Save contact</FormButton>\n    </Forms>\n  );\n};\n","import PropTypes from 'prop-types';\n\nimport { Box } from './Box.styled';\n\nexport const Wrapper = ({ children }) => {\n  return <Box>{children}</Box>;\n};\n\nWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding: 15px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 25px;\n  color: blueviolet;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\n\nimport { Wrapper, Title } from './Section.styled';\n\nexport const Section = ({ children, title }) => {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ModalWrapper = styled.div`\n  margin-bottom: 100px;\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateContact } from 'redux/contactsSlice';\nimport { ModalWrapper } from './Modal.styled';\n\nexport const Modal = ({ onClose, id }) => {\n  const user = useSelector(state =>\n    state.contacts.items.find(item => item.id === id)\n  );\n  const [name, setName] = useState(user.name);\n  const [number, setNumber] = useState(user.number);\n  const dispatch = useDispatch();\n\n  const handleNameChange = evt => {\n    setName(evt.currentTarget.value);\n  };\n\n  const handleNumberChange = evt => {\n    setNumber(evt.currentTarget.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const currentUser = {\n      id,\n      name,\n      number,\n    };\n    dispatch(updateContact(currentUser));\n    onClose();\n  };\n  return createPortal(\n    <ModalWrapper>\n      <button type=\"button\" onClick={onClose}>\n        close\n      </button>\n      <form>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleNameChange}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleNumberChange}\n          />\n        </label>\n        <button type=\"submit\" data-id={id} onClick={handleSubmit}>\n          save change\n        </button>\n      </form>\n    </ModalWrapper>,\n    document.querySelector('#modal-root')\n  );\n};\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const ContactsName = styled.p`\n  font-weight: bold;\n`;\n\nexport const ContactTel = styled.span`\n  display: inline-flex;\n  align-items: center;\n  font-weight: bold;\n  color: green;\n`;\n\nexport const DeleteBtn = styled.button`\n  margin: auto 0;\n  background-color: blue;\n  border: none;\n  color: white;\n  cursor: pointer;\n  width: 100px;\n  height: 30px;\n  border-radius: 5px;\n  transition: transform 300ms;\n\n  :hover {\n    transform: scale(1.1);\n    background-color: blueviolet;\n  }\n`;\n","import { Modal } from 'components/Modal/Modal';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contactsSlice';\n\nimport {\n  ContactsItem,\n  ContactsName,\n  ContactTel,\n  DeleteBtn,\n} from './ContactsItem.styled';\n\nexport const ContactsListItem = ({ name, number, id }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const deleteUser = evt => {\n    const currentId = evt.target.dataset.id;\n    dispatch(deleteContact(currentId));\n  };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <ContactsItem>\n      <ContactsName>{name}</ContactsName>\n      <ContactTel>{number}</ContactTel>\n      <DeleteBtn type=\"button\" data-id={id} onClick={deleteUser}>\n        delete\n      </DeleteBtn>\n      <button type=\"button\" onClick={openModal}>\n        edit\n      </button>\n      {isModalOpen && <Modal onClose={closeModal} id={id} />}\n    </ContactsItem>\n  );\n};\n\nContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ContactList = styled.ul`\n  list-style: none;\n\n  margin: 0 auto;\n  padding: 10px;\n  border-radius: 5px;\n`;\n","import { ContactsListItem } from './ContactsItem/ContactsItem';\nimport { ContactList } from './Contacts.styled';\nimport { useSelector } from 'react-redux';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const filters = useSelector(state => state.contacts.filter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filters.toLowerCase())\n  );\n\n  return (\n    <ContactList>\n      {filteredContacts.map(item => {\n        const { name, number, id } = item;\n\n        return (\n          <ContactsListItem key={id} name={name} number={number} id={id} />\n        );\n      })}\n    </ContactList>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterWrapper = styled.div`\n  width: 100%;\n  margin-bottom: 15px;\n`;\n\nexport const FilterTitile = styled.h2`\n  text-align: center;\n  font-size: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n  margin: 0 auto;\n  width: 200px;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { filteredContacts } from 'redux/contactsSlice';\n\nimport { FilterWrapper, FilterTitile, FilterInput } from './Filter.styled';\n\nexport const Filter = ({ title }) => {\n  const dispatch = useDispatch();\n\n  const searchByName = evt => {\n    const filter = evt.target.value;\n    dispatch(filteredContacts(filter));\n  };\n\n  return (\n    <FilterWrapper>\n      <FilterTitile>{title}</FilterTitile>\n      <FilterInput type=\"text\" name=\"filter\" onChange={searchByName} />\n    </FilterWrapper>\n  );\n};\n\nFilter.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { Form } from '../../components/Form/Form';\nimport { Wrapper } from '../../components/Box/Box';\nimport { Section } from '../../components/Section/Section';\nimport { ContactsList } from '../../components/ContactsList/ContactsList';\nimport { Filter } from '../../components/Filter/filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contactsSlice';\nimport { Title } from '../../components/Section/Section.styled';\n\nconst Contacts = () => {\n  const { items, error, isLoading } = useSelector(state => state.contacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      <Section title={'Phonebook'}>\n        <Form />\n      </Section>\n      {isLoading && <Title>Loading...</Title>}\n      {error && (\n        <Title>\n          Error:\n          {error}\n        </Title>\n      )}\n      {items.length > 0 && (\n        <Section title={'Contacts'}>\n          <Filter title={'Find contacts by name'} />\n          <ContactsList />\n        </Section>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Contacts;\n"],"names":["Box","styled","Forms","FormLable","FormInput","FormButton","Form","contacts","useSelector","state","items","dispatch","useDispatch","addUser","newContact","isContains","map","contact","name","Notiflix","addContact","onSubmit","evt","preventDefault","target","value","number","id","nanoid","reset","type","pattern","title","required","Wrapper","children","Title","Section","ModalWrapper","Modal","onClose","user","find","item","useState","setName","setNumber","createPortal","onClick","onChange","currentTarget","currentUser","updateContact","document","querySelector","ContactsItem","ContactsName","ContactTel","DeleteBtn","ContactsListItem","isModalOpen","setIsModalOpen","currentId","dataset","deleteContact","ContactList","ContactsList","filters","filter","filteredContacts","toLowerCase","includes","FilterWrapper","FilterTitile","FilterInput","Filter","error","isLoading","useEffect","fetchContacts","length"],"sourceRoot":""}